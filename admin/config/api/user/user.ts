/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Project Admin API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseInfiniteQueryResult,
    DefinedUseQueryResult,
    InfiniteData,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import type { UserCreateDto, UserList } from '../api.schemas';
import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const userCreateUser = (userCreateDto: UserCreateDto, signal?: AbortSignal) => {
    return axiosCall<void>({
        url: `/user`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: userCreateDto,
        signal,
    });
};

export const getUserCreateUserMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userCreateUser>>,
        TError,
        { data: UserCreateDto },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof userCreateUser>>, TError, { data: UserCreateDto }, TContext> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof userCreateUser>>, { data: UserCreateDto }> = props => {
        const { data } = props ?? {};

        return userCreateUser(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type UserCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof userCreateUser>>>;
export type UserCreateUserMutationBody = UserCreateDto;
export type UserCreateUserMutationError = ErrorType<unknown>;

export const useUserCreateUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof userCreateUser>>,
        TError,
        { data: UserCreateDto },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof userCreateUser>>, TError, { data: UserCreateDto }, TContext> => {
    const mutationOptions = getUserCreateUserMutationOptions(options);

    return useMutation(mutationOptions);
};
export const userGetUsers = (signal?: AbortSignal) => {
    return axiosCall<UserList>({ url: `/user`, method: 'GET', signal });
};

export const getUserGetUsersQueryKey = () => {
    return [`/user`] as const;
};

export const getUserGetUsersInfiniteQueryOptions = <
    TData = InfiniteData<Awaited<ReturnType<typeof userGetUsers>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetUsersQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetUsers>>> = ({ signal }) => userGetUsers(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof userGetUsers>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type UserGetUsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof userGetUsers>>>;
export type UserGetUsersInfiniteQueryError = ErrorType<unknown>;

export function useUserGetUsersInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof userGetUsers>>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>, 'initialData'>;
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserGetUsersInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof userGetUsers>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>, 'initialData'>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserGetUsersInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof userGetUsers>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUserGetUsersInfinite<
    TData = InfiniteData<Awaited<ReturnType<typeof userGetUsers>>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getUserGetUsersInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getUserGetUsersQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetUsers>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetUsersQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetUsers>>> = ({ signal }) => userGetUsers(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof userGetUsers>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData> };
};

export type UserGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof userGetUsers>>>;
export type UserGetUsersQueryError = ErrorType<unknown>;

export function useUserGetUsers<
    TData = Awaited<ReturnType<typeof userGetUsers>>,
    TError = ErrorType<unknown>,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>> &
        Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>, 'initialData'>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserGetUsers<
    TData = Awaited<ReturnType<typeof userGetUsers>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>> &
        Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>, 'initialData'>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useUserGetUsers<
    TData = Awaited<ReturnType<typeof userGetUsers>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useUserGetUsers<
    TData = Awaited<ReturnType<typeof userGetUsers>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof userGetUsers>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
    const queryOptions = getUserGetUsersQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

    query.queryKey = queryOptions.queryKey;

    return query;
}
