/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
    QueryFunction,
    QueryKey,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import type { MarketList } from '../api.schemas';
import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const marketGetMarkets = (signal?: AbortSignal) => {
    return axiosCall<MarketList>({ url: `/market`, method: 'GET', signal });
};

export const getMarketGetMarketsQueryKey = () => {
    return [`/market`] as const;
};

export const getMarketGetMarketsInfiniteQueryOptions = <
    TData = Awaited<ReturnType<typeof marketGetMarkets>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof marketGetMarkets>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getMarketGetMarketsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof marketGetMarkets>>> = ({ signal }) =>
        marketGetMarkets(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof marketGetMarkets>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type MarketGetMarketsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof marketGetMarkets>>>;
export type MarketGetMarketsInfiniteQueryError = ErrorType<unknown>;

export function useMarketGetMarketsInfinite<
    TData = Awaited<ReturnType<typeof marketGetMarkets>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof marketGetMarkets>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getMarketGetMarketsInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getMarketGetMarketsQueryOptions = <
    TData = Awaited<ReturnType<typeof marketGetMarkets>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof marketGetMarkets>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getMarketGetMarketsQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof marketGetMarkets>>> = ({ signal }) =>
        marketGetMarkets(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof marketGetMarkets>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type MarketGetMarketsQueryResult = NonNullable<Awaited<ReturnType<typeof marketGetMarkets>>>;
export type MarketGetMarketsQueryError = ErrorType<unknown>;

export function useMarketGetMarkets<
    TData = Awaited<ReturnType<typeof marketGetMarkets>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof marketGetMarkets>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getMarketGetMarketsQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
