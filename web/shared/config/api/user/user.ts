/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
    QueryFunction,
    QueryKey,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import type { HistoryList, User, WalletItem } from '../api.schemas';
import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const userGetOne = (signal?: AbortSignal) => {
    return axiosCall<User>({ url: `/user`, method: 'GET', signal });
};

export const getUserGetOneQueryKey = () => {
    return [`/user`] as const;
};

export const getUserGetOneInfiniteQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetOne>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetOne>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetOneQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetOne>>> = ({ signal }) => userGetOne(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof userGetOne>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type UserGetOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof userGetOne>>>;
export type UserGetOneInfiniteQueryError = ErrorType<unknown>;

export function useUserGetOneInfinite<
    TData = Awaited<ReturnType<typeof userGetOne>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetOne>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getUserGetOneInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getUserGetOneQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetOne>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetOne>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetOneQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetOne>>> = ({ signal }) => userGetOne(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof userGetOne>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type UserGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof userGetOne>>>;
export type UserGetOneQueryError = ErrorType<unknown>;

export function useUserGetOne<TData = Awaited<ReturnType<typeof userGetOne>>, TError = ErrorType<unknown>>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetOne>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getUserGetOneQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const userGetWallet = (signal?: AbortSignal) => {
    return axiosCall<WalletItem>({ url: `/user/wallet`, method: 'GET', signal });
};

export const getUserGetWalletQueryKey = () => {
    return [`/user/wallet`] as const;
};

export const getUserGetWalletInfiniteQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetWallet>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetWallet>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetWalletQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetWallet>>> = ({ signal }) => userGetWallet(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof userGetWallet>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type UserGetWalletInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof userGetWallet>>>;
export type UserGetWalletInfiniteQueryError = ErrorType<unknown>;

export function useUserGetWalletInfinite<
    TData = Awaited<ReturnType<typeof userGetWallet>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetWallet>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getUserGetWalletInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getUserGetWalletQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetWallet>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetWallet>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetWalletQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetWallet>>> = ({ signal }) => userGetWallet(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof userGetWallet>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type UserGetWalletQueryResult = NonNullable<Awaited<ReturnType<typeof userGetWallet>>>;
export type UserGetWalletQueryError = ErrorType<unknown>;

export function useUserGetWallet<
    TData = Awaited<ReturnType<typeof userGetWallet>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetWallet>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getUserGetWalletQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const userGetHistory = (signal?: AbortSignal) => {
    return axiosCall<HistoryList>({ url: `/user/history`, method: 'GET', signal });
};

export const getUserGetHistoryQueryKey = () => {
    return [`/user/history`] as const;
};

export const getUserGetHistoryInfiniteQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetHistory>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetHistory>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetHistoryQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetHistory>>> = ({ signal }) => userGetHistory(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof userGetHistory>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type UserGetHistoryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof userGetHistory>>>;
export type UserGetHistoryInfiniteQueryError = ErrorType<unknown>;

export function useUserGetHistoryInfinite<
    TData = Awaited<ReturnType<typeof userGetHistory>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof userGetHistory>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getUserGetHistoryInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getUserGetHistoryQueryOptions = <
    TData = Awaited<ReturnType<typeof userGetHistory>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetHistory>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getUserGetHistoryQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetHistory>>> = ({ signal }) => userGetHistory(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof userGetHistory>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type UserGetHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof userGetHistory>>>;
export type UserGetHistoryQueryError = ErrorType<unknown>;

export function useUserGetHistory<
    TData = Awaited<ReturnType<typeof userGetHistory>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetHistory>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getUserGetHistoryQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
