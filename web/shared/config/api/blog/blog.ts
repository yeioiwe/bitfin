/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Project API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
    QueryFunction,
    QueryKey,
    UseInfiniteQueryOptions,
    UseInfiniteQueryResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import type { BlogItem, BlogList } from '../api.schemas';
import { axiosCall } from '.././api.axios';
import type { ErrorType } from '.././api.axios';

export const blogGetList = (signal?: AbortSignal) => {
    return axiosCall<BlogList>({ url: `/blog`, method: 'GET', signal });
};

export const getBlogGetListQueryKey = () => {
    return [`/blog`] as const;
};

export const getBlogGetListInfiniteQueryOptions = <
    TData = Awaited<ReturnType<typeof blogGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof blogGetList>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getBlogGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof blogGetList>>> = ({ signal }) => blogGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof blogGetList>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type BlogGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof blogGetList>>>;
export type BlogGetListInfiniteQueryError = ErrorType<unknown>;

export function useBlogGetListInfinite<
    TData = Awaited<ReturnType<typeof blogGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof blogGetList>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getBlogGetListInfiniteQueryOptions(options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getBlogGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof blogGetList>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof blogGetList>>, TError, TData>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getBlogGetListQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof blogGetList>>> = ({ signal }) => blogGetList(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof blogGetList>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type BlogGetListQueryResult = NonNullable<Awaited<ReturnType<typeof blogGetList>>>;
export type BlogGetListQueryError = ErrorType<unknown>;

export function useBlogGetList<TData = Awaited<ReturnType<typeof blogGetList>>, TError = ErrorType<unknown>>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof blogGetList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getBlogGetListQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const blogGetPost = (id: number, signal?: AbortSignal) => {
    return axiosCall<BlogItem>({ url: `/blog/${id}`, method: 'GET', signal });
};

export const getBlogGetPostQueryKey = (id: number) => {
    return [`/blog/${id}`] as const;
};

export const getBlogGetPostInfiniteQueryOptions = <
    TData = Awaited<ReturnType<typeof blogGetPost>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof blogGetPost>>, TError, TData> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getBlogGetPostQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof blogGetPost>>> = ({ signal }) => blogGetPost(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof blogGetPost>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type BlogGetPostInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof blogGetPost>>>;
export type BlogGetPostInfiniteQueryError = ErrorType<unknown>;

export function useBlogGetPostInfinite<TData = Awaited<ReturnType<typeof blogGetPost>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof blogGetPost>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getBlogGetPostInfiniteQueryOptions(id, options);

    const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getBlogGetPostQueryOptions = <
    TData = Awaited<ReturnType<typeof blogGetPost>>,
    TError = ErrorType<unknown>,
>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof blogGetPost>>, TError, TData> },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getBlogGetPostQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof blogGetPost>>> = ({ signal }) => blogGetPost(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof blogGetPost>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type BlogGetPostQueryResult = NonNullable<Awaited<ReturnType<typeof blogGetPost>>>;
export type BlogGetPostQueryError = ErrorType<unknown>;

export function useBlogGetPost<TData = Awaited<ReturnType<typeof blogGetPost>>, TError = ErrorType<unknown>>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof blogGetPost>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getBlogGetPostQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}
